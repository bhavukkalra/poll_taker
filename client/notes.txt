rm src/App.* 
remove everything in src directory starting with App.

mkdir src/components && touch src/components/App.jsx



-------------------------------------------------------------------------------
Failing to compile

const App = () => {
  <h1>App works </h1>
};


This Working 

const App = () => <div> App Works </div>;


-------------------------------------------------------------------------------

Initially

import ReactDOM from "react-dom";

ReactDOM.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>,
  document.getElementById("root")
);


Now 
Destructure the render from react-dom => instead of calling the entire React-dom every time

import {render} from "react-dom";

render(
  <React.StrictMode>
    <App />
  </React.StrictMode>,
  document.getElementById("root")
);


------------------------------------------------------------------------------------------


"proxy": "http://localhost/4000/api" => in package.json

any request will go to this url

NOTE => we will need to start two servers at the same time and the command to run these servers reside
in different directories namely "client" and "server"
=> BachScript



chmod +x start.sh => giving execute permissions to script

------------------------------------------------------------------------------------------
/src/srvices/api.js
// Shared logic that can be used in multiple components
// similar to redux => as it is shared state

axios for making HTTP requests to our server

----------------------------------------------------------
old way of importing
const axios = require('axios');

ES6 way
import axios from 'axios';

old way of exporting
module.exports

ES6 way

export const fun = () => {

}

--------------------------------------------------------------------------------------------------------------------

Default Exports: Default exports are useful to export only a single object, function, variable. 
During the import, we can use any name to import.

--------------------------------------------------------------------------------------------------------------------
api.js
(method, path, data)

axios.method => can't be used as method will be passed as string 
so => we use axios[method] (bracket notation) => means axios.method


(`/${path}`, data); => only completing of the default path set in package.json


data => for post request (if get request this parameter will be ignored)

response held in response.data

--------------------------------------------------------------------------------------------------------------------
MUST INSTALL => "react-scripts": "^4.0.0", => REMOVES ALL VULNERABILITIES

Redux => Docs

The whole state of your app is stored in an object tree inside a single store. The only way to change the state tree is to emit an action, an object describing what happened. 
To specify how the actions transform the state tree, you write pure reducers.



--------------------------------------------------------------------------------------------------------------------


//const App = () => <div> App Works </div>; => functional component with no state

class App extends React.Component{ => react component has acces to react state

import { store } from "../store"; => if it is not a default export then we have to Destructure it

return() => not return {}

const setCurrent = (user) => (
  //return this object 
  {

  }
    
)

-------------------------------------------------------------------------------------------------------
!!(something) instead of Boolean() function

it converts a value (null, undefined, objects etcâ€¦) to a primitive Boolean value. 
Similar to typecasting explicitly using Boolean(value) except this converts the value to a Bololean Object and is not a true boolean. 
The double negation trick could be used to ensure that a return value is always boolean type in methods that returns a boolean value based on some condition.


--------------------------------------------------------------------------------------------------------------------------------------------------------

npm install jwt-decode => for decoding json web tokens

<Fragment> instead of <div></div> => React.Fragment  ???

constructor(props) => React component always takes in props which is send by the Parent component
super(props) => to ing=herit all the methods from parent


