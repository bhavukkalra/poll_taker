app.get('route_info', (handler_function))

app.use((handler_function)) // whole block is a middleware

-----------------------------------------------------------------------------------
Middleware

app.use
route = /login
Login - valid token or invalid token 


route = /login
Authenticate Login(middleware)  ====> PLACED BEFORE route and also called immediately after specified route is accessed 
then remaining route ex (app.post('/login'), (req, res)) is executed

THERE COULD ALSO BE COMMON MIDDLEWARES


Admin Dashboard

Middleware will first check if the user has a valid token (i.e coming from login page with correct user id and pass)
only then will be allowed to see admin dashboard 
if not redirect to login page

-----------------------------------------------------------------------------------


info about CORS (Cross origin Resource Sharing) => to handle cross origin requests
https://en.wikipedia.org/wiki/Cross-origin_resource_sharing

npm dotenv => for hiding enviroment variables e.x API KEYS

To use your own promise library(eg Bluebird with mongoose) use
mongoose.Promises = Bluebird


mongoose.SchemaType =>
SchemaType doesn't actually create MongoDB ObjectIds, it is just a configuration for a path in a schema.

i.e 
mongoose.ObjectId !== mongoose.Types.ObjectId


module.exports.User = require('./user');
module.exports.Poll = require('./poll');

// It allows us to use db variable in our application
// ie const db = require('./models') as
// db.User and db.Poll instead of first importing individual schema
// like const User = require('./models/user'); ex_usage = User.create()

// but now we can use as db.User and db.Poll with single import
// const db = require('./models)


git reset HEAD~1 (--hard flag could be added)

async await syntactic sugar


-----------------------------------------------------------------------------------
BEFORE STORING THE USERS ENCRYPTION IS DONE
//here function() keyword must be used instead of arrow function
// because of this keyword 

REGULAR FUNCTIONS => this keyword represented the object that called the function, 
which could be the window, the document, a button or whatever.

() => this keyword always represents the object that (defined the arrow function)/(it sowner) i.e it
WILL HAVE GLOBAL SCOPE

IF want dynamic this -> use function() othe wise () =>

REFERENCE = https://www.w3schools.com/js/js_arrow_function.asp#:~:text=In%20short%2C%20with%20arrow%20functions,that%20defined%20the%20arrow%20function.

------------------------------------------------------------------------------------------

FROM DOCS ---
userSchema.pre('save', async function(next){

}

Middleware (also called pre and post hooks) are functions which are passed control during execution of asynchronous functions
Mongoose has 4 types of middleware: document middleware, model middleware, aggregate middleware, and query middleware

SAVE IS A DOCCUMENT Middleware -> where this referes to doccument
Pre middleware functions are executed one after another, when each middleware calls next.

NOTE -
var schema = new Schema(..);
schema.pre('save', function(next) {
  if (foo()) {
    console.log('calling next!');
    // `return next();` will make sure the rest of this function doesn't run
    /*return*/ next();
  }
  // Unless you comment out the `return` above, 'after next' will print
  console.log('after next');
});
----------------------------------------------------------------------------------------------

in handlers auth.js  => exports.login(req,res, next) 

and in handlers/index.js => 

module.exports = {
  ...require('./auth')
}

as we are spreading it out(all handlers for auth route) and exporting each as module.exports

--------------------------------------------------------------------------------------

 ... rest and spread operator
 https://dev.to/sagar/three-dots---in-javascript-26ci

 -----------------------------------------------------------------------------------
 EXPRESS.ROUTER

 Use the express.Router class to create modular, mountable route handlers. A Router instance is a complete middleware and 
 routing system; for this reason, it is often referred to as a “mini-app”.

 -----------------------------------------------------------------------------------
recommended
FOR EXPRESS ROUTE SPECIFIC

for - /login  OR /register POST routes

bodyParser.urlencoded({ extended: true })
-----------------------------------------------------------------------------------

ONLY SEND the id and username as response not full user(with passwords)

INBUILT express body-parser not working(task)

handlers/auth.js

const user = await db.User.create(req.body);

// destructure the user
const {id, username} = user;

res.json({id, username});

-----------------------------------------------------------------------------------
Status Codes

500 -> Internal server is broken
400 -> Something went wrong
200 -> OK
201 -> Something was created
202 -> the instruction was accepted by the server and the "resource was marked for deletion"

mongoose specific error code
11000 => that field is already taken or in use(example creating a user with same name)

-----------------------------------------------------------------------------------


Authenticate => middleware(auth.js)

jwt.verify(token, process.env.SECRET, (error, decoded) => {
            if(error){
                next(Error('Failed to Authorize Token'))

            }else{
                //add decoded field to req object if authorized/verified
                
                //sending the users data to the next function to be used
                // only one middle ware for authorisation and authentication
                // coukd be used to check if user is logged in 
                // if we want to know the specific users who is logged in => done via decoded property of req
                req.decoded = decoded;
                next();
            }
        })
    }else{
        next(Error('No Token Provided'));
    }


-----------------------------------------------------------------------------------
async function => try catch block


-----------------------------------------------------------------------------------

DIFFERENCE BETWEEN app.get('/') and router.get('/')
https://stackoverflow.com/questions/28305120/differences-between-express-router-and-app-get

router.get('/') => is its own mini app seperate from the main app
Each file's router becomes a mini app, which has a very similar structure to the main app.


If you have code (middleware) that pertains to all three routes, you can put it in the main app, 
before the app.use(...) calls. If you have code (middleware) that pertains to just one of those routes, 
you can put it in the file for that route only.



-----------------------------------------------------------------------------------

map() in js
Ref = https://www.w3schools.com/jsref/jsref_map.asp

The map() method creates a new array with the results of calling a function for every array element.

The map() method calls the provided function once for each element in an array, in order.

Note: map() does not execute the function for array elements without values.

Note: this method does not change the original array.

EXAMPLE - 
Multiply all the values in array with 10:

var numbers = [65, 44, 12, 4];
var newarray = numbers.map(myFunction)

function myFunction(num) {
  return num * 10;
}

-----------------------------------------------------------------------------------
handlers/poll.js => createPoll

 poll object = {
             question: (string),
             options: 
                      [ 
                        {option: 'this is option 1', votes : 0}, 
                        {option: 'this is option 2,', votes: 0}
                      ] 
                }
        options: array of objects with properties option and  votes(defualt = 0)


 EVERY MONGOOSE SCHEMA HAS ITS OWN UNIQUE ID => by default       

-----------------------------------------------------------------------------------
TO USE THE MIDDLEWARE auth just add it before handle /routes/poll

const auth = require('../middlewares/auth')

router.route('/')
.get(handle.showPolls) 
.post(auth ,handle.createPoll) // here


now the poll won't be created unless there is a valid token in the header


-----------------------------------------------------------------------------------
middlewares/auth.js
authenticate = (req, res, next) => {}

module.exports = {
  authenticate
}

use via =>   
const auth = require('../middlewares/auth')

auth.authenticate


IF defined as 
module.exports = (req, res, next) => {}

use dirctly as 
auth   
(i.e no auth.authenticate)

-----------------------------------------------------------------------------------

in req.headers WE GET username and id and secret encoded



after we decode them we get object

this object is stored in req.decoded
{
  username: _____,
  id: _______,
  iat: _______
}


-----------------------------------------------------------------------------------
/handlers/poll => 
after creating poll  poll owner set to user id
poll id added to array of polls created by user


PROPOSED WAY-
res.status(201).json({
            ...poll._doc,
            user: user._id
        });

------------------------------------
MY WAY

        res.status(201).json({
            voted: poll.voted,
            created: poll.created,
            _id: poll._id,
            question: poll.question,
            user: user._id,
            options: poll.options,
        }

V IMP

only certain things returned => example => only the id of the user who made the poll 
NOT THE ENTIRE user object(inside poll) by doing
res.status(201).json({
  poll
})       


--------------------------------------------------------------------------------------------
AFTER CREATING THE POLL => storing the entire user

const poll = await db.Poll.create({
            question,
            user, 
            options: options.map(function(option){
                return {
                    option: option,
                    votes: 0
                }
            }
        )
        });

but DUE TO OUR SCHEMA => i.e Store only object id => only object id(extracted from user is getting stored)        

--------------------------------------------------------------------------------------------
POPULATE 

https://mongoosejs.com/docs/populate.html#population

 Story Schema{
    author: aithor._id
  }


Story.
  findOne({ title: 'Casino Royale' }).
  populate('author').
  exec(function (err, story) {
    if (err) return handleError(err);
    console.log('The author is %s', story.author.name);
    // prints "The author is Ian Fleming"
  });

  return the doccument of the author who has writte the story Casino Royale

  NOTE -> IMP
  Arrays of refs work the same way. Just call the populate method on the query and an array of documents 
  will be returned in place of the original _ids.


  OUR USECASE

  user schema {
    polls: ObjectId(ref Poll)
  }

  const user = await db.User.findById(id).populate('polls');

  user.polls => return array of polls created by user

  ---------------------------------------------------------------------

  HANDLE 'ref' in mongo with populate() => REPLACES REFERENCED id in schema with doccument of that id


  ---------------------------------------------------------------------

  const poll = await db.Poll.findById(id).populate('user', ['username', 'id']);

  poll schema{
    user: ref to User poll
  }

  fills the user field of Poll(schema) with 'username' and 'id' only 

  if we did this
  const poll = await db.Poll.findById(id).populate('user');

  user field will be populate with whole user docuument(including password) => security issue




--------------------------------------------------------------------------------------------


//hardest route to configure => as most confusing

vote = async (req, res, next) => {
    try {
        const {id: pollId} = req.params;
        const {id: userId} = req.decoded;
        const {answer} = req.body;

        if(answer){
            const poll = await db.Poll.findById(pollId);

            if(!poll) throw new Error("poll Not found");


            //will store which option is voted
            //function(option_doccuments_inside_poll) => traversing through all option Schema documents
            //option_doccuments_inside_poll.option => accessing the option inside the particular doccument


            //goal => returned array will have only one change from (options array inside Poll Schema)
            //i.e number of votes will be increased by one from original one rest id, option(string) will be same for all
            const vote = poll.options.map(function(option_doccuments_inside_poll) {
                if(option_doccuments_inside_poll.option === answer){

                    return{
                        option: option_doccuments_inside_poll.option,
                        _id: option_doccuments_inside_poll._id,
                        votes: option_doccuments_inside_poll.votes + 1
                    }

                }else{
                    //if not the option marked return the whole option_doccument as it is
                    return option_doccuments_inside_poll;
                }
            })


            //NOW THAT WE GOT WHICH OPTION IS BEING VOTED

            //CHECK IF USER ALREADY VOTED
            //filter returns only those elements int the array which satisfy the condition in the call back function
            store_user_if_already_voted = poll.voted.filter(function(user) {
                return user.toString() == userId
            });

            
            //user has not already voted i.e its his first time
            // => update details in schema
            if(store_user_if_already_voted.length <= 0){

                poll.voted.push(userId);
                poll.options = vote;
                //CRUX

                await poll.save();

                //to avoid request time out => we need to send a response
                res.status(202).json(poll);

            }else{
                throw new Error("Already Voted");
            }


        }else{
            throw new Error("No answer Provided");
        }
  
    } catch (error) {
        error.status = 400;
        next(error);
        
    }

}









--------------------------------------------------------------------------------------------







